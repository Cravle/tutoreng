// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(cuid())
  name              String
  surname           String?
  email             String               @unique
  nickname          String?
  mobileNumber      String
  password          String
  role              RoleEnum             @default(STUDENT)
  sex               SexEnum
  balance           Int
  isGraduated       Boolean
  ownedEvents       ScheduleEvent[]      @relation("owners")
  asGuest           UserOnEvents[]
  teacherConnection TechaersToStudents[] @relation(name: "teacherConnection")
  studentConnection TechaersToStudents[] @relation(name: "studentConnection")
  /// socials 
  telegram          String?
  instagram         String?
  viber             String?
  facebook          String?
  whatsapp          String?
  tiktok            String?

  motivation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOnEvents {
  id      String        @id @default(cuid())
  userId  String
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String
  event   ScheduleEvent @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ScheduleEvent {
  id           String         @id @default(cuid())
  title        String
  owner        User           @relation(fields: [ownerId], references: [id], name: "owners", onDelete: Cascade)
  ownerId      String
  dateFrom     DateTime
  dateTo       DateTime
  callUrl      String
  homeworkUrl  String?
  teacherNotes String?
  studentNotes String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  guests       UserOnEvents[]
}

model TechaersToStudents {
  id        String @id @default(cuid())
  teacherId String
  teacher   User   @relation(name: "teacherConnection", fields: [teacherId], references: [id])
  studentId String
  student   User   @relation(name: "studentConnection", fields: [studentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoleEnum {
  STUDENT
  TUTOR
  ADMIN
}

enum SexEnum {
  MALE
  FEMALE
}
